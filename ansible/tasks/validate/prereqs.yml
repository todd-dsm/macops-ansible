---
# Pre-flight validation tasks. If these steps fail there's no reason to continue.
# Each task will either:
#   - Succeed, print a success_msg and move to the next task, or
#   - Fail, print a fail_msg and exit.
# IF this completes, then we are ready for the next step.

# FIXME: these were good validations starting out but 
# they don't have much continuing value.
# - name: Validate running on macOS
#   assert:
#     that:
#       - ansible_os_family == "Darwin"
#     fail_msg: "This automation is designed for macOS only"
#     success_msg: "Pass: Running on macOS ({{ ansible_os_family }})"

# - name: Validate macOS Architecture
#   assert:
#     that:
#       - ansible_architecture is defined
#     fail_msg: "Fail: Unable to determine macOS architecture."
#     success_msg: "Pass: macOS Architecture: {{ ansible_architecture }}."

# - name: Validate required environment variables
#   assert:
#     that:
#       - ansible_env[item] is defined
#       - ansible_env[item] != ""
#     fail_msg: "Fail: Required environment variable {{ item }} is not defined or empty."
#     success_msg: "Pass: Environment variable {{ item }} = {{ ansible_env[item] }}."
#   loop:
#     - myFullName
#     - myEmailAdd
#     - myMBPisFor
#     - adminDir
# 
# # Command availability validations
# - name: Check Homebrew binary
#   ansible.builtin.stat:
#     path: "/opt/homebrew/bin/brew"
#   register: homebrew_check

# - name: Validate Homebrew is installed
#   assert:
#     that:
#       - homebrew_check.stat.exists
#     fail_msg: "Fail: Homebrew is not installed. Please run install-prep.sh first."
#     success_msg: "Pass: Homebrew is installed at {{ homebrew_check.stat.path }}."

# - name: Check Git binary
#   ansible.builtin.stat:
#     path: "/opt/homebrew/bin/git"
#   register: git_check

# - name: Validate Git is installed
#   assert:
#     that:
#       - git_check.stat.exists
#     fail_msg: "Fail: Git is not installed. Please run install-prep.sh first."
#     success_msg: "Pass: Git is installed at {{ git_check.stat.path }}."



# File/Directory existence validations
- name: Check admin directory
  ansible.builtin.stat:
    path: "{{ ansible_env.adminDir }}"
  register: admin_dir_check

- name: Validate admin directory exists
  assert:
    that:
      - admin_dir_check.stat.exists
    fail_msg: "Fail: Admin directory {{ ansible_env.adminDir }} does not exist. Please run install-prep.sh first."
    success_msg: "Pass: Admin directory found at {{ admin_dir_check.stat.path }}."

- name: Check backup directory
  ansible.builtin.stat:
    path: "{{ ansible_env.backup_dir }}"
  register: backup_dir_check

- name: Validate backup directory exists
  assert:
    that:
      - backup_dir_check.stat.exists
    fail_msg: "Fail: Backup directory {{ ansible_env.backup_dir }} does not exist. Please run install-prep.sh first."
    success_msg: "Pass: Backup directory found at {{ backup_dir_check.stat.path }}."

- name: Check SSH known_hosts file
  ansible.builtin.stat:
    path: "{{ ansible_env.knownHosts }}"
  register: known_hosts_check

- name: Validate SSH known_hosts file exists
  assert:
    that:
      - known_hosts_check.stat.exists
    fail_msg: "Fail: SSH known_hosts file {{ ansible_env.knownHosts }} does not exist. Please ensure SSH is configured."
    success_msg: "Pass: SSH known_hosts file found at {{ known_hosts_check.stat.path }}."

- name: Check GitHub SSH key in known_hosts
  ansible.builtin.lineinfile:
    path: "{{ ansible_env.knownHosts }}"
    regexp: "^{{ ansible_env.host_remote }}"
    state: absent
  check_mode: yes
  register: github_key_check
  changed_when: false

- name: Validate GitHub key in known_hosts
  assert:
    that:
      - github_key_check.found | bool
    fail_msg: "Fail: GitHub key not found in {{ ansible_env.knownHosts }}. Please ensure SSH keys are configured."
    success_msg: "Pass: GitHub key found in known_hosts."

# Solarized theme validation with recovery
- name: Check solarized theme directory
  ansible.builtin.stat:
    path: "{{ ansible_env.termStuff }}/solarized"
  register: solarized_check

- name: Handle missing solarized theme
  block:
    - name: Display solarized theme missing message
      debug:
        msg: "Solarized theme not found at {{ ansible_env.termStuff }}/solarized. Downloading now..."

    - name: Ensure terminal downloads directory exists
      ansible.builtin.file:
        path: "{{ ansible_env.termStuff }}"
        state: directory
        mode: '0755'

    - name: Clone Solarized terminal theme
      git:
        repo: "{{ ansible_env.solarizedGitRepo }}"
        dest: "{{ ansible_env.termStuff }}/solarized"
        clone: yes
        update: yes
      register: solarized_download

    - name: Confirm solarized theme download
      debug:
        msg: "Pass: Solarized theme downloaded to {{ ansible_env.termStuff }}/solarized"
      when: solarized_download.changed

  when: not solarized_check.stat.exists

- name: Validate solarized theme exists (after potential download)
  ansible.builtin.stat:
    path: "{{ ansible_env.termStuff }}/solarized"
  register: solarized_final_check

- name: Confirm solarized theme availability
  assert:
    that:
      - solarized_final_check.stat.exists
      - solarized_final_check.stat.isdir
    fail_msg: "Fail: Solarized theme still not available after download attempt."
    success_msg: "Pass: Solarized theme confirmed at {{ ansible_env.termStuff }}/solarized."
